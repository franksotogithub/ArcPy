import numpy as np

def OrdenarXY(manzanas):
    a=np.array(manzanas)
    #a = np.array([[3, 2], [6, 2], [3, 6], [3, 4], [5, 3]])
    idx = np.lexsort((a[:,3].astype(float), a[:,4].astype(float)*-1))

    #print a[:,1].astype(int)
    print "sin ordenar"
    print a
    print "ordenado"
    print a[idx]




def OrdenarManzanas_Cant_Viviendas_XY(manzanasx):
    a=np.array(manzanasx)
    #a = np.array([[3, 2], [6, 2], [3, 6], [3, 4], [5, 3]])
    idx = np.lexsort((a[:,3].astype(float), a[:,4].astype(float)*-1,a[:,1].astype(int)) )
    b =a[idx]
    rs = b.tolist()
    rs_final = []

    for el2 in rs:
        for el in manzanasx:
            if (el[0] == el2[0]):
                rs_final.append(el)
                break
    return rs_final
    #print a[:,1].astype(int)
    #print "sin ordenar"
    #print a
    #print "ordenado"
    #print rs_final


def OrdenarManzanas_XY(manzanasx):
    a=np.array(manzanasx)
    #a = np.array([[3, 2], [6, 2], [3, 6], [3, 4], [5, 3]])
    idx = np.lexsort((a[:,3].astype(float), a[:,4].astype(float)*-1) )
    b =a[idx]
    print  b
    rs = b.tolist()
    rs_final = []

    for el2 in rs:
        for el in manzanasx:
            if (el[0] == el2[0]):
                rs_final.append(el)
                break

    #print a[:,1].astype(int)

    return rs_final
    #print "sin ordenar"
    #print a
    #print "ordenado"
    #print rs_final

def Ordenar_Manzanas_Y(manzanasx):
    a = np.array(manzanasx)
    # a = np.array([[3, 2], [6, 2], [3, 6], [3, 4], [5, 3]])
    print a
    print "ordenado"
    print a[np.argsort(a[:, 2])]
    idx = np.lexsort((a[:, 1].astype(float)))
    b = a[idx]
    #print b
    rs = b.tolist()
    rs_final = []

    for el2 in rs:
        for el in manzanasx:
            if (el[0] == el2[0]):
                rs_final.append(el[0])
                break
    return rs_final


m=[['02060100100002A', 1, 6974.02, -77.64796604746, -9.27717130724], ['02060100100002C', 3, 8991.75, -77.64774810321, -9.27671177438], ['02060100100003', 11, 25882.38, -77.64831341561, -9.2779636248], ['02060100100006A', 14, 2426.82, -77.64713267431, -9.27796053189], ['02060100100007A', 6, 976.08, -77.64681330164, -9.27749053408], ['02060100100002B', 9, 3732.87, -77.64856364605, -9.27582546135], ['02060100100017', 15, 3106.22, -77.64831734371, -9.27892918472], ['02060100100018', 13, 3267.25, -77.6489079174, -9.27837475553], ['02060100100007', 11, 2774.05, -77.6467956581, -9.27792742648], ['02060100100004', 13, 4036.89, -77.64738349487, -9.27922782288], ['02060100100016', 10, 3382.55, -77.64768866138, -9.27952701083], ['02060100100025B', 13, 2903.56, -77.64891830393, -9.27956969879], ['02060100100026', 10, 3503.08, -77.64801436769, -9.27984577051], ['02060100100019', 6, 2078.01, -77.64939758749, -9.2779057933], ['02060100100024', 14, 3298.55, -77.64922314319, -9.27871534673], ['02060100100015', 14, 2992.93, -77.64706447125, -9.28012537091], ['02060100100027', 0, 2504.99, -77.64833792274, -9.28006821005], ['02060100100030', 10, 3666.43, -77.64738311753, -9.28043809628], ['02060100100022E', 10, 2148.09, -77.65047996988, -9.27853124908], ['02060100100037', 14, 4260.82, -77.64976991749, -9.2793382606], ['02060100100014', 6, 2816.89, -77.64647552001, -9.28067727897], ['02060100100028', 0, 436.36, -77.64820643693, -9.28037709219], ['02060100100029', 11, 3403.85, -77.64769097785, -9.28072768707], ['02060100100022C', 8, 1749.96, -77.65109749309, -9.27894285044], ['02060100100040', 0, 568.1, -77.64960752861, -9.28006925456], ['02060100100034', 1, 3557.15, -77.64800975671, -9.28103021418], ['02060100100022G', 0, 7779.74, -77.65167327703, -9.27832473719], ['02060100100033', 11, 3506.38, -77.64739944982, -9.28158617318], ['02060100100043', 8, 3387.64, -77.64832646898, -9.28133579638], ['02060100100022F', 1, 32570.4, -77.65254879353, -9.27850255719], ['02060100100032', 12, 3639.07, -77.64674376106, -9.28221453229], ['02060100100042', 14, 2927.82, -77.64896666492, -9.28075063113]]
#OrdenarXY(m)

#OrdenarManzanas_Cant_Viviendas_XY(m)

#m=[['02060100100052', -9.2753, 0.005289302071], ['02060100100051', -9.275, 0.00607088824604], ['02060100100050', -9.275384509, 0.00603327842443], ['02060100100049', -9.27538450956, 0.00569832380288], ['02060100100048', -9.27538450956, 0.00694542843751], ['02060100100047', -9.27538450956, 0.00814114319356], ['02060100100046', -9.27538450956, 0.00786541558254], ['02060100100045', -9.27538450956, 0.00768225267149], ['02060100100044', -9.27538450956, 0.00687429566603], ['02060100100043', -9.27538450956, 0.00615642048946], ['02060100100042', -9.27538450956, 0.00544710417205], ['02060100100041', -9.27538450956, 0.00506511928706], ['02060100100040', -9.27538450956, 0.00469401863801], ['02060100100039', -9.27538450956, 0.00463311187778], ['02060100100038', -9.27538450956, 0.00445129885122], ['02060100100037', -9.27538450956, 0.00395597152188], ['02060100100036', -9.27538450956, 0.00459415486326], ['02060100100035', -9.27538450956, 0.005204848208], ['02060100100034', -9.27538450956, 0.00595451486063], ['02060100100033', -9.27538450956, 0.00668772108724], ['02060100100032', -9.27538450956, 0.00752505751822], ['02060100100031', -9.27538450956, 0.0064725895779], ['02060100100030', -9.27538450956, 0.00564674653672], ['02060100100029', -9.27538450956, 0.00578274415931], ['02060100100028', -9.27538450956, 0.00527279077319], ['02060100100027', -9.27538450956, 0.00513738996896], ['02060100100026', -9.27538450956, 0.00484434544945], ['02060100100025B', -9.27538450956, 0.00445966711228], ['02060100100025A', -9.27538450956, 0.00364010167219], ['02060100100024', -9.27538450956, 0.00339940088018], ['02060100100023', -9.27538450956, 0.00259165391858], ['02060100100022H', -9.27538450956, 0.00187699304402], ['02060100100022G', -9.27538450956, 0.00343231508695], ['02060100100022F', -9.27538450956, 0.00408966806788], ['02060100100022E', -9.27538450956, 0.00318391083245], ['02060100100022C', -9.27538450956, 0.00375365572268], ['02060100100022B', -9.27538450956, 0.0039571868532], ['02060100100021', -9.27538450956, 0.00122139994439], ['02060100100020', -9.27538450956, 0.0017455567639], ['02060100100019', -9.27538450956, 0.00257133275798], ['02060100100018', -9.27538450956, 0.00315129415581], ['02060100100017', -9.27538450956, 0.00388294554543], ['02060100100016', -9.27538450956, 0.00469693004984], ['02060100100015', -9.27538450956, 0.00552538303714], ['02060100100014', -9.27538450956, 0.00630533255361], ['02060100100013', -9.27538450956, 0.00622993277191], ['02060100100012', -9.27538450956, 0.00544790104639], ['02060100100011', -9.27538450956, 0.00539393175231], ['02060100100010B', -9.27538450956, 0.00597253665343], ['02060100100010A', -9.27538450956, 0.00635238811554], ['02060100100009', -9.27538450956, 0.00620373455274], ['02060100100008C', -9.27538450956, 0.00579689637834], ['02060100100007A', -9.27538450956, 0.00373873535662], ['02060100100007', -9.27538450956, 0.0042974244792], ['02060100100006A', -9.27538450956, 0.00356071056787], ['02060100100005', -9.27538450956, 0.00471002945897], ['02060100100004', -9.27538450956, 0.00459523272512], ['02060100100003', -9.27538450956, 0.00302933125258], ['02060100100002C', -9.27538450956, 0.00253037896853], ['02060100100002B', -9.27538450956, 0.00149098798245], ['02060100100002A', -9.27538450956, 0.00263482046558]]
Ordenar_Manzanas_Y(m)


#
#a = np.array(manzanas)
#b = a[a[:, 1].astype(int).argsort()]
#
#rs = b.tolist()
#rs_final = []
## print rs
#
#
#manzanasx = manzanas[:]
## print manzanasx
#for el2 in rs:
#    for el in manzanasx:
#        if (el[0] == el2[0]):
#            rs_final.append(el)
#            break
#return rs_final
